using CodeCracker;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Diagnostics;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace CodeCracker
{
    public static class GeneratedCodeAnalysisExtensions
    {
        public static bool IsGenerated(this SyntaxNodeAnalysisContext context) =>
            context.SemanticModel.SyntaxTree.FilePath.IsOnGeneratedFile() || context.Node.IsGenerated();

        internal static bool IsGenerated(this SyntaxNode node) =>
            node.HasAttributeOnAncestorOrSelf("DebuggerNonUserCode")
            || node.HasAttributeOnAncestorOrSelf("GeneratedCode")
            || node.SyntaxTree.HasAutoGeneratedComment();

        internal static bool HasAutoGeneratedComment(this SyntaxTree tree)
        {
            var root = tree.GetRoot();
            var isCSharp = root is CompilationUnitSyntax;
            var firstToken = root.GetFirstToken();
            SyntaxTriviaList trivia;
            if (firstToken == default(SyntaxToken))
            {
                var token = isCSharp
                    ? ((CompilationUnitSyntax)root).EndOfFileToken
                    : ((Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax)root).EndOfFileToken;
                if (!token.HasLeadingTrivia) return false;
                trivia = token.LeadingTrivia;
            }
            else
            {
                if (!firstToken.HasLeadingTrivia) return false;
                trivia = firstToken.LeadingTrivia;
            }
            if (isCSharp)
            {
                var commentLines = trivia.Where(t => t.IsKind(SyntaxKind.SingleLineCommentTrivia)).Take(2).ToList();
                if (commentLines.Count != 2) return false;
                return commentLines[1].ToString() == "// <auto-generated>";
            }
            else
            {
                var commentLines = trivia.Where(t => VisualBasicExtensions.IsKind(t, Microsoft.CodeAnalysis.VisualBasic.SyntaxKind.CommentTrivia)).Take(2).ToList();
                if (commentLines.Count != 2) return false;
                return commentLines[1].ToString() == "' <auto-generated>";
            }
        }

        internal static bool IsOnGeneratedFile(this string filePath) =>
            Regex.IsMatch(filePath, @"(^service|^TemporaryGeneratedFile_.*|^assemblyinfo|^assemblyattributes|\.(g\.i|g|designer|generated|assemblyattributes))\.(cs|vb)$", RegexOptions.IgnoreCase);
    }
}